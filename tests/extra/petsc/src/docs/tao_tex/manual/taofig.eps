%!PS-Adobe-3.0 EPSF-3.0
%%Title: (Toolkit for Advanced Optimization)
%%Version: 1 3
%%Creator: (Acrobat PDFMaker 5.0 for PowerPoint)
%%CreationDate: (D:20011211144712-06'00')
%%For: (Steve Benson)
%%DocumentData: Clean7Bit
%%BoundingBox: 108 90 720 477
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%+ procset (Adobe Acrobat - general image support) 1.2 0
%%+ procset (Adobe Acrobat - monochrome image support) 1.2 0
%%+ procset (Adobe Acrobat - color image support) 1.2 0
%%+ procset (Adobe Acrobat - indexed color image support) 1.2 0
%%EndComments
108 90 moveto 720 90 lineto 720 477 lineto 108 477 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 9
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 6
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 12
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 le and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
BBox 0 get BBox 1 get
BBox 2 get BBox 0 get sub
BBox 3 get BBox 1 get sub
rectclip
} if
gsave
clippath
pathbbox
/BByMax exch def
/BBxMax exch def
/BByMin exch def
/BBxMin exch def
grestore
BBxMax BBxMin eq BByMax BByMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background L1setcolor gsave clippath fill grestore } if
/areaOfConcern
BBxMin BByMin BBxMax BByMax
BBxMin BByMin
BBxMax BBxMin sub 0
0 BByMax BByMin sub
BBxMin BBxMax sub 0
12 packedarray
< 0B 00 01 04 04 04 0A>
2 packedarray
def
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
r1 add
r2 sub
abs
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 5
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} load dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
108 90 612 387 rectclip
[ 0 -1 1 0 18 584.64 ] concat
%%BeginResource: font BPINGA+TimesNewRoman,Bold
11 dict begin
/FontName /BPINGA+TimesNewRoman,Bold def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1296 dict dup begin
/.notdef 
<10bf317005b8302fd45b0609d6bde5a48b0240d44d91aabd11b7ee50303a
812fda6ed97443c437b8d3bea589> ND 
/space 
<10bf317079c757bf91> ND 
/A 
<10bf3170612fa8ae28b81a20dacbdc38fc69afa09cf4db39e2bcdbcf6119
e64e70a7c6c564effe07b0d371ef6f05ab9d6662cd1799a518254c2df7b7
8dfc3b0a250c148f91a4756fa92e10425e9175aca407e63cc6c881765861
33901dd8defb282b3058bcf1eedaae00432ffd6e425310aafc215cf1f67e
d5f415092da5cbb3e9181cf978ff1cb31931925aedff81ea92> ND 
/O 
<10bf317040c3a0acf9f1271fccb36e40f74769c5058f3dd029081ab337a0
531a4605fb82972dee2f5e91c8f1dfd915d11ce6c212a698b10495fef668
0adac7ed2367bfcc70d927c041272343d7801e35e814a7c7dbeaacc81302
cdaad1d6c08945f60c73a03bd818226340f2c9aa2e64de6741519c88848c
afc7b6e88ae41cf0bce13a3aea4eef817fb83ffe7294b937d9d07d75> ND 
/S 
<10bf31704d4d2f6115e62eb3cb4a9ddfe5db9cde1ae983f5728ba6db2f41
314d20066a19799bf57ae2dbe01a0b61f8c2a6e42b2f8d918c37811d5f70
25e5ac7e73fd1ec59e9775c0cede584da8df39f8d2add4534fa37460fbd9
dae4a220a5f6fbc49ab223ba031a8d18b19668d10e453118f3fe781a6ca4
9ea97b3a0d73b13b22e8ae77669dd6c88e1b9b68dd8f7b7fe964bf532900
c4d5709fca3afda461ac703c3e3e8b96f1a46b23454036057cd11c016ab5
9498270bb64ebc20243227d866d9101252cc6e707890e5fee274a276aa20
d2eb6b7cc56e4e5597254e2da0c7a35d81099f865acf33314c8d04d484f3
6e2da3527c7dcc93dc75cb24ec34139fcb9835a375> ND 
/T 
<10bf31705d65c0901254b536f1c00ee6bba769af8fab539afa33c4dc7b3d
0b039b7960dadc75c6984783ede31c8d758f3d1421e43724284ed184488a
3229445ba464c0cf2546d855d7d7dc9408d18ff048717487999268295b3d
6b5f3553b1c85628da92bfce27f01ce4dc761acbb75f96a90e659470e134
ed3ddaed> ND 
/a 
<10bf31704ab21818500193ceb7cb34e9df44d2f8ec9dd5c98d55ae22888d
9df2e6f213a10b28cefcaf95aa9640c835b3bd1ffcdc75a4a63fa25c6d04
6e0087c66cd64147f3ed96dff91cb0244813473d9381cce21ce83d903943
f4ac8f3242bc292da1de1531cc532a86e1f3cc7d1e021df739aea871418b
5de99006d4c5ab2682816c98649eed26a6b084e7f7ec911ec66ec74f0ad5
38dbeb4cb0b01a394cc508cff8b61d71209af50bf8f8ceff036e8a30b999
2cc25f8ecf6950be6e3e9dff42e54836dd89050eeb2b37dd3a0be262e8d0
35a9d19daa2c018f11edad2db0075ba942763369ef43d94cbf0bc2410fbc
2ce40e96872b5ba313aee01224b418272066554dc36af669eca48e0dfc1b
4fcee06d> ND 
/e 
<10bf317040c23fc2e1ae41aa9282758c8c31679b7e286f24fa5b5a9a6fa9
75c7be3cf05ebf2a0fc236eb986b5f92e4980314c681fa061e7cec91d696
7818e2a880229495638c5ebd9d4d2949f80813353896ef8dcfc225660744
df906eeb5dc0c12faef2701cc430f938b192981dca77eb2c468f927adc09
540054eb413213ac2c8b75433c91b7aacb70b3c4376bd38fad0e034e7675
e0> ND 
/i 
<10bf3170524a2d226105953d5eb24f8564e6b6f09006dcc5de63bfd94641
5431d498669f2a636dd1ce21202db89c173adcec99d9be4feb68a686a334
a4c32747de504ee5b288cf4791bb5cdd4a6f4abb420134e012ba9028a116
613f1accf2a80106e9041eb6299349713fdcc742227c93df73e17499d587
d463b9326464b14774fda5181e4133> ND 
/l 
<10bf3170524a2d223ba1bbf4c5f21ed2ea327f3adebffacfabc0760528fb
c599edf0863a6b729192d7cba5b9c80f0aa5ad4cf81891dad207693fb655
004238f4e7160a575e3797bd4099> ND 
/m 
<10bf3170422e98c5ed7ba2b7088d79e9e2818a90b5d814a1206a981fa47f
862545d86e5774c22cb75288f646fafd458bbc6d054d4d3cc74a2523e484
fe78e199ddcb1968c8b6caca0f25aad70888cf9affb9ce4bc81b508f7bc6
f3f4101e8765442e5856ef14e7a67b3953f86d293654380a72cc0ce0f93d
60af394ae7f77acf9b4841bf6367ee3f347d52adc3d20b75e623aebcc7e1
454939c521c56d240ca699f20d4a909d8615bb761de2ab6e367e19048e80
a0e981d6b5a2c1dec33f9c2a025f5e1d45fa3c1cde2284b6ebd1ceb33dc5
06c68f7f2e925b9679318e5c8e29e1c69aa269822e7f13aac7a0d100833d
688b3c0c7e400b85a20a96fbdff0737ab054bd03b86538f9e1a745606112
63b89a0a4210a8c322f6c572a07c4ce8a71ee425fa57fd69c1d5bf> ND 
/n 
<10bf31705fc1934666df69889b5e7716ef594193b6332fd6e87679d4002a
60b418d237a9a7fcd602eb906106efaf0b01b4528edbdaffd7aa13593d7f
0f21d9915346ad8e6da94702995c89ac1ca2bf2b32ba15e8cfbcb839038e
d3cfc8235729a16269b2f6c14c0345f60ae251ed8180347001c22289ef41
5cf4384a45d9a8e999484bc9b88c99f3dd7539b38fdb724af0e4ec8e215f
e0c6184ff35603d3cc911f6a426176dc15e6fe4e94358cddf593f4927f46
> ND 
/o 
<10bf31705d64a97b25cbcf5f96762b96d7bfc3628a598e0e406df472e1b2
b6c3d1b9dd3197bd4a86e13d5762df795e653ed93fbfa39d6dcac609ba77
c1604e85df1da6d235e41f8852cd6edfc2c9bd4ad7c9df97672f04e7e88c
f8ab91d6e3ced912be69d652d9e0ec0738b545ab515f5a17c4ee9ccd2d9f
152f06898ed1b9f20b48324686581d9490ff739a3b9e7caa7924b3359c8d
50b7da47a6815b5dedc41ca51cf6919d> ND 
/p 
<10bf31706c4c139ad1831178d9de498369c69bcfbcd0e57f7b9ea1e7dc04
9057245be52771ad802e500605e42a174aeea2d387bfdf5f8160cfe25fc1
9f8a57070a773a2703e99d5e7918c008585d5214503d27b4dbf094962d7f
76909b097054e5a139a62a955a50150d5342db2a7bda5fcdfdf67810aa5d
c64616f2a9cf9d4076fae339ec72b5965e18f8f43af7980634e6226c6c78
413bdde2c598398880ab440f04280157d7b36709d189a99abd9d48955e29
a742c2544a27a8c57f6e0e7cbc2cc427cdaaa879cbcb651c> ND 
/r 
<10bf3170422f4b41fab8ad31d745a52d75c28a1338888e5d6f5511d10efc
d6ac3c6a4f10fa489aefb56e1633a88fda843ba7ee11a9ab92173f9696f6
69522c57ef2668d6d2c16259f62f3e8292a1ecd3a4612808e54a0c77dbb1
62a7cb576f19f37904cbc72d93499b977fa4456e5bb2f4b0539dbb8f1983
64954bf87ecaa4241504ba091fd551d50593cb27384bdd161ee19db68ddb
f4ddb8d775410156b88c05013ba6b648216f18922f8d5f09a4> ND 
/s 
<10bf317041f0382b75a20af751f40c26faa193ddb43e17425ae2a7147072
c8adcb754540ad07c088b49c90ffcc12fc9bcaa4031e371b2b9f03c7dfea
3ccf43b81edb745e3d66d388f0b6652ea483e1e2692eb92f829967451d89
c1c2dd63d488033c52c02cc7e2da36d3222fbbc122fc4a5dad63561f412d
189e8e6d85ab5f60e154a1d7a15d7012b65fdaee5a1c075c5d0cdaa98a14
8737d96cd4c43c11af2e0c233f33107a07c5db3ab1455bad83782b94f74c
98ca6d6ba5a25777ae843c961b76e1108029364514b8de043d9f143a93e4
991e6483453f842fb13bbb9b592edd53fa> ND 
/t 
<10bf31706c43702a3ba333d6396a27008c7d9ec0f97f7d821e81c4dfe978
3a6528b50abbe393ef5d601f52bf5d77ebc263fe98283b2ecc6b82e445f0
03e67be8c4d981c7a936b403802ec79ac9fadee0d8907b8e4791f6ac32b5
6afce28831bdbf6534dcb0234b10e060c060d99eb3> ND 
/v 
<10bf31706626184554fbb05cc04a78c1c868958f13be2aceaeae214b581a
9d71549d7bb135df5b0d59dc6e6dbe3e93557571c8a634838ef5ebfc8792
bff60a368e2e89db4e0dc04100448ece5c6c3bd17ad495c71ed7a674296a
f0079b3166e6382002478eed535cc412f94a64e2fb4fce1153ca255e> ND 
/z 
<10bf317067541260c90a3c48f14ed46f58b21fccf6026f5818c2d3d8c814
4fb2bb518e95c492add904fe8b0604945757be7879749eb313180e97947e
ddd5d1e4601ad0b211c25a698eb084ca2bdb0841b7c3cf45ed> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BPINGA+TimesNewRoman,Bold findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 65 /A put
dup 79 /O put
dup 83 /S put
dup 84 /T put
dup 97 /a put
dup 101 /e put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 118 /v put
dup 122 /z put
dup 160 /space put
pop
%%EndResource
[/N41/BPINGA+TimesNewRoman,Bold 1 TZ
%%BeginResource: font BPINAO+TimesNewRoman
11 dict begin
/FontName /BPINAO+TimesNewRoman def
/FontMatrix [1 1000 div 0 0 1 1000 div 0 0 ] def
/Encoding  256 array 0 1 255 {1 index exch /.notdef put} for  def
/PaintType 0 def
/FontType 1 def
/FontBBox { 0 0 0 0 } def
/FontInfo 1 dict dup begin
  /OrigFontType /TrueType def
end readonly def
currentdict
end

systemdict begin
dup /Private 7 dict dup begin
/BlueValues [-15 0 600 650] def
/MinFeature {16 16} def
/password 5839 def
/ND {def} def
/NP {put} def
/RD {string currentfile exch readhexstring pop} def
2 index /CharStrings 1296 dict dup begin
/.notdef 
<10bf317005b8302fd45b0609d6bde5a48b0240d44d91aabd11b7ee50303a
812fda6ed97443c437b8d3bea589> ND 
/space 
<10bf317079c757bf91> ND 
/parenleft 
<10bf317046e70250e8bd40d114dd6e816b58f4d3349c0c7727832e7501d9
0d48751e5ed01a4a989a3de6f3df4e8150bcde04496d7ebf18ade860af48
8df404b0480a8fe53e55e37acb5a554f9e5cbbe042244d6fc0aa0fdafde4
acb4c52d35fe39221cd926f89c> ND 
/parenright 
<10bf3170537b448b82841392ad69a78470fcf6ad5b9860e31496592c5fd2
8c2a948b7ef1391379bc9dc9754e13aa1a0d8be5cfd2e3bc1b6a246b4628
a43a8883776071abf86a7883d030defeed590f0bf1949e72bae27054def5
466be78152f4af0ef71e17f1> ND 
/comma 
<10bf31703349889182628c27046cd28591351566e0dd9918199391ab1e71
486c64d05bb98e8e971258eb23fc2c1c680eac8a011cdbd1e19f1758f932
2fa930559db4dc8ad65afc3701e52ac5d183fd29d8312642e94d04052d7d
f70157aafefed3b4bfad260a8075001774f81a0d82a7df92> ND 
/hyphen 
<10bf317046e70250e8bf5c5fe00ffd6ec4c4119e538166> ND 
/A 
<10bf3170612fa8ae288a2f767c6f2d22480749f87ffaef88db9508f355b3
d621b9e09a8d1290afe57d05190debf7b19b92f6309b70e08d2409abdf50
3b6a0e5daa0043a6e298cadec0a7dbd5588f8ba0646e339db53e322e33db
33e9ac93d421016e880386d59c5f84e2c9dcb201c618c0d88390bc39b5b5
dcf9b13cb5b08470f0d83c168f6d7ea2244d1b> ND 
/B 
<10bf31706ea8189a0122a2c3dc80451ea987f9cc6dc7afa0c8f0365e6d8e
59a275ca593c5d46c9efa9ebe4192f8e472ac6f0efdf90f5d264a8b47fa4
3bcd031546c0586a98250a46abdef7d038322a132dd14df107aae195c311
99c6fa7558e3ee2379999d05cf38ad7f22726f37f2f0654cf65c11005a88
2feb945df6452201e1abb666d0244ac9dc622994ec7112e71f49ba0b5306
4d49384d5d74864da9fc7636c8b9964886a4103e2320a1f33cb3f7f7bcc7
104eb429cfd6cfab753b2e30fdbce693ce1dcc5a7fe31d75680753c52fe9
350712be59c0ee4a2780b638de9e8e44870622e76d3c23cdfd281b0b8177
c0aff3531220d18c12c91634c02401e01a11> ND 
/C 
<10bf31705d65c09013f5e74d02fbfce579927dc4371245d5279a0be7ec2d
bd3b1448f6fd9c53426e6238d321f77957395a071b4b8eae65710650ca99
5020550eaa4528d828ef4c47ac3d29b589dd7f1c7cfe44b10e3e8fa63e50
7c3e4eb74e257f81314f58ef9126142bc9d3a940c619a0d5450ffb6600e9
bb7f776713c2df8dd431070f31717d2477542aecd1539231d249a65da0e1
ee77958319b99e72488e0e9fa74f4d170e269189eb39aa1a> ND 
/D 
<10bf31706ea8518093a448f0413d9dd2503cf14562d62f8e03c59ef262c0
e81d3c5037d7a8fbf15657e5bea1080fe305ab71bf0048720c010cf41197
6f2c354776e6ac045fcbc3395f65891cbe4c7f0093e58d10b57eae23372e
4cc99d7f2f11c1f1c023288641813a3b8b65e70e4b5173920a628da83be4
7b524c38228036fccc15a820529e8626ae48a60adbbae5fd> ND 
/E 
<10bf31705245888107d641c65df0d045384b4474a865698169ff2c4c5759
f26e2217c59fcbe377198e20e38aaa44f075831908ff3584c8503712a3f9
da462024eae3426d516a8864b3756edb7e42923b77324ddcf4879e1b61b4
02502bf9f5c08a938a8b9111b299fb506f1aa6115b23bb6038633ef2c172
1c1c4fba6b5b7baae1d192358092d890074dc21b1d5f65994b78807f042e
8945e17dc9fd4baebebbadfc790575a38910eab682188d9cdb44060faa47
1dcf91df296595839280be99912fd6d9ac4594d1b8a3> ND 
/F 
<10bf317069b1b5630e42cd6c8ff2cb4d3f7bc188fb90c1fdbffc389a7b7c
590172825fc5f7c1632f0e00f7f24a69c85e73a086926561cd7597f366b9
c557c28ba97bd9e48588932b584d925e90f75351236f8dee991d8b2912e0
edc0500223be1a5bd4cd44c3c3de75aa12b7e63ed3a399ba00214a66fe95
b5d95b0096ce0321bb87083de3bbc29cfe8ef473870f448ffcd9f71c6888
fa2bf4ba82669c30c14d2655a8b69d82e43f233aafad0cc27d2d> ND 
/I 
<10bf31705600a7ed90307a9003ca62013c6a672423969cbfb09d38b977c3
3bb76a0a443b03ca15feffb7f47ead3efae89c4da09011014b3ef74dfcc4
49aa62038fec2b8087c3eb93eadcca82adeba753d37fb428848495514418
28d8a0f3ad99e43ca7d439d4d98a470d6617f8dd1388> ND 
/L 
<10bf31706d7ba414cb278d86ccf8028d3dbbadce953c477ec6fd892cdd09
28b47464cdb0aff88491ce732d9c10732adab5aca1a48b24486aeab6e776
8d3f8a7557500e8ad2d7563790919272c92abe6932db67709b8be481fa2d
23f34f8a2142f5ade46e9f8e951b9e69f9979f92c2712747285f1cd50a35
4a817e3933293b845a2c1e14ed04ed77> ND 
/M 
<10bf31706eabaf2594e77a9675ec006571e0e9e06efe1257272e43745911
6bb5c77e49c5893e436186147ed4dee67442743db3b67390df2d58309463
c51fd863f83b23a245748a23c83dddb18eb70175912c99b5a9698a0a9b58
c13d9d1e490e5cc2657d019a0bed0afae67d0fab1e3e922280f2c63cd165
8f2f2a3f3d79e78f0e8430b0280a1bbccbea2de91df7492c2525f455d113
08d1c49bac90e54e3aca955bab26368c90001198d3c7> ND 
/O 
<10bf31705c375b3d5210abc6113d1eccc3996df8e17afe55ff6ce7844512
ec3d00e8e14006c2a34fda82847bc1b409b24432923058193a4980f5345e
f7987d9a74c9eb57945acd33f61fbd08e39eb567eff585c3afa3b1d552df
70e9dc4b3b734c062ddd3310e8886364703264daf4cb9498ab7f1a43e8c6
5449005f5b36f244acfb2984b56d> ND 
/P 
<10bf31706ea9c5bc0db16a9d0fb9334b7aae45fa9562423ca0efcafbe577
696190382686f72544b1109cd9a28e6e2fb8c3e703e277558d9de53e9bd4
331eb7411fa27fc9fbf9488ff1a8e626acd2f355101bb86e40f636dd5a74
50c4f3ac4c3fce01d454db469da536ea46528530bc3e44fdc91176a1e591
1b2932205e6c0eac6f4d330f0230a163b5b30ecdc649a4ff6b024a9513ec
d5f934e2e3b5d7f24bd0170221950b8bb0ffa0c50e77c36e34adf2e847c9
adbff54bf77ef65d9afdb3878865> ND 
/S 
<10bf3170383eecc69ba25cd9f9f1a3f877f72d54ca249226fb09a99225d4
fa4a892ae0bf757b41a46aaf766816bb2e9c6c4e867aeb02a76d05e762b6
353837bdf52bbc0c70c14510f08ced31ac95e2c8b5dfdbf8f1dffd4709a0
760737961b7464d75e4dbf7323db187fa23f8213fd84f092b3c292e45093
4a017d49f1fa4f8d834c3fd0c5126c0c5c896c1a48c0653753c6f56c23b6
627010a4379bd3d96b26db0b3531098cdc23704e1f8e25a61651df0d8d02
8f68c8b7a7de4652566ef5c50305a3ec674a5be2d1bf9f76580a00788d85
ad3f4dc24f5adec7880bc3a7db38c71260e951f8778b0aff0ff2e97effe6
f0b2b33485e5f0401138cd3f9e066ed25ff05e7594ebdb0029f3d5> ND 
/T 
<10bf31705b0718f462bb36d02a655e51f04593b972dbe0892a4279b53c95
62dbd237266bc0cb4e5967f6d053e97e3cc8fe6477448edcd2c2ed40f6e6
056ef32aac1986bf84927c9fb1e2806a71f53c8604421852f835782fd7d8
0fdb45127c08fbe24f16e5af9ede981de72f75b4f62ef25f8b6075081fcf
> ND 
/U 
<10bf3170625de69094c07a5362c37c2340b7aaa2ad99fa65367eb831d919
fbeb91fbcb1d1991f5fded0850a5c85234a20d0407bf7aedd0d09383513f
980325ec3206b4c3c24816431baad85f8fbd1e68433e246ebb00c0f3cbb1
811882668f5f7473971b0828de694509d80bc9338cf4a0b3a9280be6e863
8b6decfc0a73cf14336bec34d30cb5a2bc77814abd0dcf624802769c9da2
e981b90c014060ff2e989894cbf8f11d1eaaed1d790fe24e95bb8f3c7e60
a214d7756386132c18985f9e64f74d0d> ND 
/V 
<10bf31706627397327b5b3e6974d7bda1a9e6e8199978e1d9f5c32e451d7
0260af120b4e10a178f18e4baf6ac2ec894cc4a314ad59cf591f89a48cf9
222bb229f7123739079b3306f27ca785cab1fc1a01d2160c1fac5c6e6265
63f032f9e6631f7743615f4e2e7665a763058620fc7f86f32ad39641437e
ec6f21971b60ca0205097d80a4c4d4> ND 
/a 
<10bf31705d647142d5ee6b7c4c12c41164f05a89990635873917bf00c5a2
b1b299b84b64fad030fdefe54a736fd84981f1bdecf34c327a4087285dd7
ff9a128a9fff4f1e5e34e2c477e4543546f0e505eb84b8e6141c12199331
8a7bef58caa55697aff5d8bf4fe61eb63478ae931b5c51fe7be8aa76cee5
cf639a1d462398300117c6a9c09614a29dfc50b3c7ddbacc1c6e2f7accb0
35d51bb776dfa4f2180b5bfa695d4ee30d466764f5192b628fd7c4971313
cd38d55ff99cfe805727052d975c4756402eb9230dd87b777a603efe9c10
65e950375d54aa41ed1c701bfac764ae78b65834b8918a99ed1f017d5313
eb0950b1f45353f40dc633104ecc941e4bbbf8359d5ae9042ef0f4edfdb8
> ND 
/b 
<10bf31707b35db816a4355a1c9cd0401bf6033c55938246c8b69de26e575
c058903a4e9b57b68075848962a6cd3da069ec2730d8699e3ccf520befe1
1a090d11586ebd56effd705bd3a5ced6c4343ddaabfe70e422082141dc06
c695cc46ee2dde408c0760a4c361b784ab85994758cbad73179f314048f1
c5a0c06c0e0ad84ded3a7904f207403afdd3193bf093fb903dbdef2de225
7307e43f8ee047d711ed22adc155c93b72dbad1a68> ND 
/c 
<10bf31705fc10320935f517e088588bc677b6f6b1116d76a45fb5fc081aa
57ad08a2f19e4ebd5e7f2e40678b64d780ab49e945b6f1fcf8c1bf2edd40
201d9d025abf1aec5b1b3268a3f2a9365f1c6e4133cdb11264503de1434e
2553cdd7a1785e8aefca6abe49ef29279001bfee84321f1c29e0a5b47534
7f9b91833b42fbc209dedbbca6bb8dac3b6f01ececb32ee525fd2275d1f3
f94c46a2dc92d591> ND 
/d 
<10bf31705e925b80b46abd5c29fa2d468b9b5e4bad025ff66ae6421f2159
e410fae538e7f5a90755fc4aa0e1909acab87d2263fe2beb089d6b932597
f97955542fb23ee02ff075e0e2003bcd35a0dc8fcdeec3b05157e1f949f5
3c3859814e432358033eab4cbebb11cb313a2d4e01ccb1ec831eb024e2db
c3d579a8da35c14675626591ac2eca02995f016a332260c2ef3a214c5222
c09fc068d46227963e811f66f7af291aa81d7807ad4efe2098965b55e611
61084fbfd3c71fb1d7ddef324c18429080886cac73b35a7c57be7b> ND 
/e 
<10bf3170422f4b41885a9676842055648b7ac91c5a5b75b50afc4ad63a16
3403789c9c8ba615f8e38a9fce64aceadaad23d4e3dbfa43e075f8b5608d
92b54d863453827f92409bc9183300c8f2b193237fd39a67d028e7efccd3
224f7d467520735ecf6bf2ce731119ee6085c9e4a87b9d8af5aaaf671a24
b9d9d852fe88b0aa1a2fe53bd12da555ee08ba1ef1ee246f54193c816b> ND 
/f 
<10bf317040cdafcf4c85ea96770a161ac86c86b3da1de71c3c1d8d7b233d
d5c9149f810914ad38a97a185443c1c2440e78f30291f76f6d029b3ea2b6
66de02ac1bf19ed2dbfc70d08ae79c368cc19dd7ee6f7f891d2c83ea3a82
f4273ce61781b76966f5c7876c34e2b43a45523c4b42ee5dfa86ed1aad28
c225091d8e9e75f9abbae478bde45603b24282244c90d0bd1005e38693d2
05c915e9f7b21b731549211bb149d33709f6ba292435a821caec7d09122a
a85fb1> ND 
/g 
<10bf31705b0767a01e9193e4d997e718ba6351677893b73d138e3fe6ba14
fc659a3bcdee55e0cfe8324eeac72638d3bd305a7a0220257ff3808a1470
04dc5c3c9fcb344358fed8b5ae71f4f49bb62f7c38ae95fdb022e2f50d0f
f7edd042065f7148993d640d50d67f360ac97639f25c381784672dcecf1d
1627665bc46b98264545bb45b967dbd7f6dce2f63c1e6751d9e493efd546
e255705157ddc690cb167218c88d537fe6a759d15d23d8bf19975778954b
513e4f87de1d7e922f34c8ee289c3522056d92971a6692e2b85efc32e805
5f726b3e561153ede1bd48ac9ed5e0024936e813717a672f7da4b25e0f4c
fa800bfb48a1e7e6e175f9ef63c0a88c39518c20ae1f79f29fe16a404d8f
590228fa5880231b26e78848d12ee249c635fcfa1c6175dbe52bf4c85030
42acafcb20327b817e4efb88945955dd6d08889ea1fb3f310e8cb4172190
21cc423288f3c72f1f0ebcd75197d45530bfc75571856796dc6ba51fbdd3
ed9cec0c0d7ad50b11a85f88370b45b4a51e0293d38df958b8> ND 
/i 
<10bf31705ac6fd959d25cdc7a9a3e9a496239b73578bd39bc85c0d669e22
6e691e09b0f32a97a0998434376a9ae157042bfa0f185e0e1869e77dcfcf
1555c1c8abd2efd30cc82f4c6c4ddf0f13b90a3c76a63f04f6deca3db44a
cc213f28bbe83758b298928dc74aa0666fbe3e63b2fac529d140e3b7039a
bc2bb148559fada7a9e275e919fc3f2cd6b953d39d41def61462d0b129f2
b21125b163636a99efd52186dc8496e41f> ND 
/l 
<10bf31705b0817c8e08e579d70bd731872938fa19da6249b22a36add018f
2d71afb39a24cba2d5b131292eaf2ea6440cd481b67673b68d5de7db4045
53f0515df79be16519f0349ec3761dc09575b85d12a0ca2ef3e3cac5171f
27c0bb5b6c16bd708dadf6acc7da72304e> ND 
/m 
<10bf3170612f50a32a221f92c62df6f217e624d0a9df1e121860640913cc
49c4b2d35b710b10afd4f958933cf36f77fa2631f24cbc39b6fb55164082
193c40e902d50b4dd0e9f5ae2867995b45675b905195bdfcc9b26d09519c
1e89df3994ea78cedeba6852e8b9c507c215033124b55ca65aeabe76ef04
57fa09d46563663ca74b6f95faf692e9ff2805a952be9ce73108295db01a
1994fa03645166fdecc81234fb6ed970d2a939579f06453bc00a9eb193c6
89afa32196c9bbfd4f2e113a0f0a380ead1a15279b212e2d6f74df100cc7
60a6d17274c6477145b98511b0f38377fb67ec75a8941a93686e94c1719c
fcfef92ae4ed1bb42acc6930c9fd7d14d03f2c5cc57e8f007a194fcdc380
4777a58ea7912850daff4d6c2854942dfb30e0675160b33e854bf7fed66f
47144c25d4528d081f2387910709746bda8159065734924af6aea3b40f49
1ba747b6dede483a966ee00175b89acc0a77eed79d9fdb> ND 
/n 
<10bf3170638bba1389001ebc99bd428947467ee318fefc1fb124f3371d83
7e6e4fd04510bb88359fc2d65b2f295b6f18b7850f6ca41f0fd067e40bcc
1e6a5b41ca20f07f1559265c094e47681cd30c939ca836f577db4be36b05
95c3d60cd00f5b5495365e7e02e3400714839e79cc3816e739cdb0ba1b66
3f096ef3ea59642b52897d5ef4b5012d68776aa74244415b9e96a4f773a5
8085f9fe5bb74ace5b6860ca975ea43b7d0db4eefeddd777982336d72d05
c093ca194b7cd3478661a723994ed178a305b939140b4ac4b7ef4bb11e73
> ND 
/o 
<10bf31705fc1db5456c194eea6db4b28ba27bcfe06dfbaea808b4b94782b
858d11975b27223d0b6d7d91b178aa636f44bd6799b0a1e7bdfe3b2848e8
67d16652cf1e1d16eb11c8e931a8c3a5c20ce3e46e302745f5c6d7e5ce21
21e333fdaa150cd3191a1e4c670506e5c48803290df3192b44aa2b4f51a0
a9c983af94e8a18415a60616a6a395b3de67178db0d5045384581c136ad0
9005bf> ND 
/p 
<10bf31707a065bb2d4fcdbff26dc7fc389a2b8b370b59f91b1e9fc0bef0c
327c88198d7b546dfc608b13f7fcb8bc64cff7af2c18f699da39e53fbe37
ec097fa9ed32bc909b431f94a38ef46b90c907c345fc0194b5122ed9dbb4
520a43693133d37a01aa7d03cfea7c465d1f39c417c97cf35752895b647b
f6eeb9e1860d65028ce948e26109d628005c88929ab2810711af73457538
140a230647d1a4449996d6a087aeef7aa11197b1a7d6644dda8a28e570b9
025110e75308275897df1500b8ee5bed886eab146b5949fd3e0cb2a624f1
82a3907dabdc7d67145f1487b4fdd05c5af52274c2933d164387a1> ND 
/q 
<10bf31705e925b80bb44afdd80449a9019004483157f7a206da365a5b3f7
8e817f7d85ccb98decc0413cb1aad3badad1cc03a563c391c8aa6068d7e3
0e7f25d81543c3055a792149dafa6b421b59bb9a7c586f00d982f84e34a8
6eb81a6d2e5d0469a0475534487ff8a1de86976d09002e57cf1b9a5b9651
783da658816ced2d26e352c444560625e85828b2e4e4558755e30d1a05aa
ed4f42608d7e2eeedb01e0259b91825941bd1b5a38ce6f06522b93ba8b0d
c3140f68c73955f4b4bd495b40f7a8977e75e8b1c2519046a0f0449793> ND 
/r 
<10bf317063846c0d04467b4514eeaf5ad995f8d8d5368dfec5aee1c6b68a
3c0ec443b5151d573544f035f9c8d56a8c86eff8bc45b9cb7e9f7b4d2809
af6f18097fb347def46731e8a3ca8727e68580e7e5a82ffd67834895aa8a
7069ddf865d0109c1727ed7e1906ae399964f53305401f293656e81d3f7f
a520bb51b43e002474ba474471779fe9f889b94891c2fcd98f80aeea2c61
083a35a481b1750c54fd90563aed2fa403c1bb4ae1b4> ND 
/s 
<10bf31704e7c764f163406da7dbbaf9d43c65b8fb757ade7829da62aa468
ae4baad8607e81147b16ed99a46ab38e424e5512c18fc36490fe0e0e3c97
dcaa7fe80721b43eb7737e0a60636624d7c3bb6047489980efa6d2c4807d
50aa67e7cf84be79d7d15a6b706fddbf727c9c6d9b0a699629abe5e444e5
0457164832d1875637e41249b15e9b27dc3430ba6cf1c3ab4c74334bddfb
8eb29c16da6b1ed80d7e90ec9c4540b3b77731da9497fdb30cff9013413f
000a5d34ea717ad1e71f37aca4fc003a6dde001ac4d2b8ee38552cfaec10
a42d8a25> ND 
/t 
<10bf3170675b4d3401fff3ff5f765da1975e70428467ea281d5658a08302
13a3804f9a1319dd7c580c31580e87e258a447c36de3afa6295edab19ac4
8b72bc19bc7bbb33808d808ebf49d28b777c53d40fa69bc3ca85c2cf0fb2
3dcaafafc241c80c646145936a07b2aeeb3dbc48cf79b8029b13f4d41756
50d9e9> ND 
/u 
<10bf31707ec0b061a3e31ce6a8e02f67c79fc6fb9433b583752df0b97381
ced785f0788651d9110f4d168d6f4fb870b9f8634f66a1fe17ef5bb051c8
5b17a112a0ece57f7e85709c1e46ba1a1de6ef26a274c75bdde36925dd09
efae6e5faacef2f29e68904c9555df5e0f6550945360d079ca305237daa8
7397519a4b0aef19668718de15c20ef2e07af7217dbd27700833b73e8190
1c7d2aacb619fbf2f1396d79a94fea4ca18c65bd942fda84> ND 
/v 
<10bf3170612e88360faf380e328fa052d16002b3a6eb4d26fc61a8261d88
5d55beefaa23f749e4680928d2ec50b44ff8d74a2a42a0e615124d351c37
a9b6b3979ac1eedcff65bc4e156ed5711cac4c00ba96902c9956d3adb8e9
345080689b72e5082717e79b08e915301d3c209a4fac7e8f857cfb983000
d031a94c1a8ab5b2b0900013f2ae> ND 
/x 
<10bf31706ae07dd17233d682c9e1d171e05c39e4c2e1f18748a48d85f7aa
7cc65889e1b9adc82d1a976279fe7993dae95f57dccb69a45885b73cea03
d21a96fa38c7939c2a96ece439bc9aa684358afdabeb04ef7d8ec3bb5b3c
abe7efc841c96493b46c90a45df4b325a723eff80649b127668ef3097078
a3aa469a18461e5d2dd1ff75b61f9703453844d7df91eb99a0ed3ff61a59
265671b958253b91d2e399cb7b2f436352e5fb24345fa1f70fd78f1ff451
7a30037eb3eb35f2e10ea2490fd5cc6e967836f42e303278ce23561832f8
8625704ea3dc> ND 
/y 
<10bf3170638bba13f480e5fde8996045de127a9c4618a2d4aa7c3941a65b
655e0c9abd29436b155308878db9c977a5fa9d8aabf88f01b9ed200087ec
a512549272155995d5ba8a658d1b9bd6631ff76a4e668a0f712e1ffb6536
2645509bc9da53c94714c8c3d06e835b3de8a617493a3b48a5cf09eb51a1
f8e94701f8b707ec6cac19b3b46b6af22d6b57b2906df634fd967798ff79
41b6c0c1662b9e4850b0745567e166dc15afd8d264bb362629824a3196ac
305d1be65193e27d2fd4c922aa9edd149d8aaacac7819d1067e8f92d1467
837fe3> ND 
/z 
<10bf31706d7b034b88b69b8745d3549483d633ef0d22afe4edf1d8b16d7d
8fcfd4b207cd72a6b23080b93a267d6450021d8dda1b2a7d1048bb787cdd
e4b3370d59c6ba81363a10949ee62624babf5dce2b9ed804c69a546bc5cf
6ad525f5bb> ND 
end
end
put
put
dup /FontName get exch definefont pop
end
/BPINAO+TimesNewRoman findfont /Encoding get
dup 0 /.notdef put
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 79 /O put
dup 80 /P put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 160 /space put
dup 173 /hyphen put
pop
%%EndResource
[/N38/BPINAO+TimesNewRoman 1 TZ
/N34 [/DeviceRGB] /ColorSpace defineRes pop

false setSA
n
36 756 540 -720 re
1 1 1 setrgbcolor
f
false setSA
q
0 10.1284 -10.02 0 46.02 36 cm
Q
false setSA
n
180 672.9 168 -546.9 re
0.501999 0.501999 0.501999  setrgbcolor
f
n
186 666.9 168 -546.9 re
0 0.800003 0.604004  setrgbcolor
f
8.75999 w
10 M
0 j
2 J
[] 0 d
n
166.26 642 m
363.42 642 l
0 0 0  setrgbcolor
S
n
166.26 150 m
363.42 150 l
S
7.02 w
n
252 205.38 m
292.8 205.38 l
S
n
292.68 198.18 m
307.2 205.44 l
292.68 212.64 l
eofill
n
192.42 365.28 m
206.88 372.48 l
192.42 379.74 l
eofill
0.720001 w
1 j
1 J
n
306 492 m
306 488.7 308.7 486 312 486 c
336 486 l
339.3 486 342 488.7 342 492 c
342 623.52 l
342 626.82 339.3 629.52 336 629.52 c
312 629.52 l
308.7 629.52 306 626.82 306 623.52 c
h
q
1 0.481995 0.501999  setrgbcolor
eofill
Q
S
330.48 505.02 m
/N38 [0 18 -18 0 0 0] Tf
(Linear) show
( )
[4.55933 ] pdfys
(Solvers) show
n
307.14 263.64 m
307.14 260.52 309.66 258 312.72 258 c
335.22 258 l
338.34 258 340.86 260.52 340.86 263.64 c
340.86 342.36 l
340.86 345.48 338.34 348 335.22 348 c
312.72 348 l
309.66 348 307.14 345.48 307.14 342.36 c
h
q
1 0.481995 0.501999  setrgbcolor
eofill
Q
S
330.48 271.5 m
(Matrices)
[16.009 7.99887 5.01114 6.00101 5.01114 7.99887 7.99887 7.009 ] pdfys
n
307.14 173.64 m
307.14 170.52 309.66 168 312.72 168 c
335.22 168 l
338.34 168 340.86 170.52 340.86 173.64 c
340.86 239.76 l
340.86 242.88 338.34 245.4 335.22 245.4 c
312.72 245.4 l
309.66 245.4 307.14 242.88 307.14 239.76 c
h
q
1 0.481995 0.501999  setrgbcolor
eofill
Q
S
330.48 178.62 m
(V)
[12.9938 ] pdfys
(ector) show
(s) show
n
306 366 m
306 362.7 308.7 360 312 360 c
336 360 l
339.3 360 342 362.7 342 366 c
342 455.4 l
342 458.7 339.3 461.4 336 461.4 c
312 461.4 l
308.7 461.4 306 458.7 306 455.4 c
h
q
1 0.481995 0.501999  setrgbcolor
eofill
Q
S
330.48 372.9 m
(Ind)
[5.98837 8.99451 8.99451 ] pdfys
(e) show
(x)
[8.99451 ] pdfys
( ) show
(S)
[10.0025 ] pdfys
(et) show
(s) show
7.02 w
0 j
2 J
n
268.62 474 m
366.06 474 l
S
n
252 306 m
292.8 306 l
S
n
292.68 298.8 m
307.2 306 l
292.68 313.26 l
eofill
n
252 408 m
292.8 408 l
S
n
292.68 400.8 m
307.2 408 l
292.68 415.26 l
eofill
n
250.86 564 m
291.66 564 l
S
n
291.54 556.8 m
306 564 l
291.54 571.26 l
eofill
0.720001 w
1 j
1 J
n
207 191.46 m
207 185.4 211.92 180.48 217.98 180.48 c
261.9 180.48 l
267.96 180.48 272.88 185.4 272.88 191.46 c
272.88 613.02 l
272.88 619.08 267.96 624 261.9 624 c
217.98 624 l
211.92 624 207 619.08 207 613.02 c
h
q
1 1 0.395996  setrgbcolor
eofill
Q
S
238.14 265.02 m
/N41 [0 24 -24 0 0 0] Tf
(T) show
(A)
[17.3229 ] pdfys
(O O) show
(pt)
[13.3392 7.98706 ] pdfys
(i) show
(m)
[19.9871 ] pdfys
(iza) show
(t)
[7.98706 ] pdfys
(io) show
(n)
[13.3392 ] pdfys
( ) show
(S)
[13.3392 ] pdfys
(olver) show
(s) show
257.76 190.74 m
/N38 [0 18 -18 0 0 0] Tf
(\(Unconstrained,) show
( )
[4.51428 ] pdfys
(Bound,) show
( )
[4.51428 ] pdfys
(Least) show
( )
[4.51428 ] pdfys
(Squares,) show
( )
[4.51428 ] pdfys
(Complementarity\)) show
( ) show
7.02 w
0 j
2 J
n
140.64 372.48 m
192.54 372.48 l
S
0.720001 w
1 j
1 J
n
126 126.72 m
126 123 129 120 132.72 120 c
159.54 120 l
163.26 120 166.26 123 166.26 126.72 c
166.26 660.18 l
166.26 663.9 163.26 666.9 159.54 666.9 c
132.72 666.9 l
129 666.9 126 663.9 126 660.18 c
h
q
0.395996 0.604004 1  setrgbcolor
eofill
Q
S
153.36 317.76 m
/N38 [0 19.98 -19.98 0 0 0] Tf
(A)
[14.4231 ] pdfys
(pplication) show
( D)
[4.97884 14.4231 ] pdfys
(river) show
n
380.4 139.14 m
380.4 135.78 383.16 133.02 386.52 133.02 c
411.18 133.02 l
414.6 133.02 417.36 135.78 417.36 139.14 c
417.36 263.82 l
417.36 267.24 414.6 270 411.18 270 c
386.52 270 l
383.16 270 380.4 267.24 380.4 263.82 c
h
q
0.395996 0.604004 1  setrgbcolor
eofill
Q
S
n
363.3 141.48 m
380.4 150 l
363.3 158.58 l
eofill
395.1 163.62 m
/N38 [0 16.02 -16.02 0 0 0] Tf
(Applica)
[11.5757 8.01954 8.01954 4.46309 4.46309 7.12217 7.12217 ] pdfys
395.1 214.486 m
(tion)
[4.46309 4.46309 8.01954 8.01954 ] pdfys
414.359 160.381 m
(Initialization)
[5.36339 8.03885 4.4824 4.4824 4.4824 7.14149 4.4824 4.4824 7.14149 7.14149 4.4824 
4.4824 8.03885 8.03885 ] pdfys
n
380.4 570.18 m
380.4 566.76 383.16 564 386.52 564 c
411.18 564 l
414.6 564 417.36 566.76 417.36 570.18 c
417.36 660.72 l
417.36 664.14 414.6 666.9 411.18 666.9 c
386.52 666.9 l
383.16 666.9 380.4 664.14 380.4 660.72 c
h
q
0.395996 0.604004 1  setrgbcolor
eofill
Q
S
n
363.3 633.48 m
380.4 642 l
363.3 650.58 l
eofill
n
365.94 466.8 m
380.4 474 l
365.94 481.26 l
eofill
n
380.52 300.18 m
380.52 296.76 383.28 294 386.64 294 c
411.36 294 l
414.72 294 417.48 296.76 417.48 300.18 c
417.48 539.82 l
417.48 543.24 414.72 546 411.36 546 c
386.64 546 l
383.28 546 380.52 543.24 380.52 539.82 c
h
q
0.395996 0.604004 1  setrgbcolor
eofill
Q
S
395.1 598.86 m
(P)
[8.90541 ] pdfys
(o) show
(s)
[6.22995 ] pdfys
(t-) show
414.359 580.62 m
(Processing)
[8.91347 5.3409 8.01636 7.119 7.119 6.23801 6.23801 4.45991 8.01636 8.01636 ] pdfys
404.82 305.28 m
(Function and Derivative Evaluation)
[8.91983 8.02271 8.02271 7.12535 4.46627 4.46627 8.02271 8.02271 4.00011 7.12535 8.02271 
8.02271 4.00011 11.5789 7.12535 5.34725 4.46627 8.02271 7.12535 4.46627 4.46627 8.02271 
7.12535 4.00011 9.80081 8.02271 7.12535 4.46627 8.02271 7.12535 4.46627 4.46627 8.02271 
8.02271 ] pdfys
n
450.36 327.3 m
458.7 319.02 l
466.98 327.3 l
458.7 335.64 l
h
q
1 1 0.395996  setrgbcolor
eofill
Q
S
464.58 339.9 m
(TAO code)
[9.76879 11.5469 11.5469 3.96002 7.09333 7.99069 7.99069 7.09333 ] pdfys
464.58 220.74 m
(User code)
[11.5598 6.2253 7.10629 5.32819 4.01942 7.10629 8.00365 8.00365 7.10629 ] pdfys
n
450.36 206.34 m
458.7 198 l
466.98 206.34 l
458.7 214.62 l
h
q
0.395996 0.604004 1  setrgbcolor
eofill
Q
S
463.08 462.24 m
(Interface to external )
[5.35385 8.02931 4.47287 7.13195 5.35385 5.35385 7.13195 7.13195 7.13195 4.01942 4.47287 
8.02931 4.01942 7.13195 8.02931 4.47287 7.13195 5.35385 8.02931 7.13195 4.47287 4.01942 
] pdfys
482.339 462.24 m
(linear algebra tools)
[4.47287 4.47287 8.02931 7.13195 7.13195 5.35385 4.01942 7.13195 4.47287 8.02931 7.13195 
8.02931 5.35385 7.13195 4.01942 4.47287 8.02931 8.02931 4.47287 6.25097 ] pdfys
n
448.86 447.84 m
457.2 439.5 l
465.48 447.84 l
457.2 456.12 l
h
q
1 0.481995 0.501999  setrgbcolor
eofill
Q
S
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%EOF
